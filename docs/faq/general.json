[
  {
    "question": "What is AO?",
    "answer": "AO is a decentralized computer network built on top of Arweave that enables developers to create scalable, permanent applications.",
    "tags": ["ao", "arweave", "general"]
  },
  {
    "question": "What does \"AO\" stand for?",
    "answer": "AO stands for Actor-Oriented. AO is a decentralized computer network built on top of Arweave that enables developers to create scalable, permanent applications. [Video](https://video.twimg.com/amplify_video/1935699115926761472/vid/avc1/1280x720/Yy8kie8Y5_WS5Atm.mp4?tag=14)",
    "tags": ["ao", "protocol", "definition"]
  },
  {
    "question": "What is Arweave?",
    "answer": "Arweave is a blockchain-like protocol designed for permanent data storage. It allows users to store data indefinitely by incentivizing miners to maintain the network.",
    "tags": ["arweave", "blockchain", "storage"]
  },
  {
    "question": "What are AO processes?",
    "answer": "An AO process is a smart contract deployed on AO. Processes hold state, receive messages, and have functions to handle different interactions.",
    "tags": ["ao", "processes", "smart contracts"]
  },
  {
    "question": "What is an Arweave Wallet?",
    "answer": "An Arweave wallet is a crypto wallet which stores and holds $AR tokens. A wallet can be used to deploy AO processes, and upload data to be stored on Arweave.",
    "tags": ["arweave", "wallet", "crypto"]
  },
  {
    "question": "How does AO work with Arweave?",
    "answer": "AO is built on top of Arweave's permanent storage network, using it as the base layer for process and message storage.\n\nAll messages sent between AO processes are stored on Arweave. This creates an immutable audit trail of all interactions, and enables AO's \"holographic state\" - the message history can be replayed/executed in order to get the state of any process.\n\nThe relationship is symbiotic: Arweave provides the **storage layer**, while AO provides the **computational layer**. AO processes can also directly access data stored on Arweave through assignment mechanisms - you can pull in any Arweave transaction as input to your process computation.\n\nThis makes AO particularly powerful for applications requiring long-term data integrity, auditability, or decentralized computation that needs to persist beyond the lifetime of any particular infrastructure. [Video](https://video.twimg.com/amplify_video/1930640133902282752/vid/avc1/1280x720/KnwbT2Vyqh5jLMly.mp4?tag=14)",
    "tags": ["ao", "arweave", "storage", "holographic state"]
  },
  {
    "question": "What is holographic state on AO?",
    "answer": "On AO, every single interaction with an AO process is stored as a transaction on Arweave. If you have a process and all of its interaction history, these can be used to “reconstruct” the current state of a process.\n\nHolographic state refers to the concept that no global shared state of processes is stored on AO. Instead, AO nodes compute state on demand based on the history of a process. Since AO processes are deterministic, the current state is essentially a \"projection\" of all processed messages over time (like a hologram). \n\nAs there is no global shared state system, processes are concerned with their own state and interact with each other through a message passing system. This enables true parallel execution of processes on AO. [Video](https://video.twimg.com/amplify_video/1930640133902282752/vid/avc1/1280x720/KnwbT2Vyqh5jLMly.mp4?tag=14)",
    "tags": ["ao", "holographic state"]
  },
  {
    "question": "How do AO processes handle state?",
    "answer": "In AO processes, state is maintained through **global Lua variables** that persist between message evaluations. When you declare a variable at the global scope in your AO process, it becomes part of the process's persistent state.\n\n```lua\n-- This creates persistent state\nGameState = GameState or {\n  players = {},\n  currentRound = 1,\n  isActive = false\n}\n\n-- This also creates persistent state\nBalances = Balances or {}\n```\n\nState persists between message evaluations but is isolated per process.\n\nEach AO process maintains its own independent state and is **not** shared between different processes (unless explicitly communicated).\n\n**State Initialization Pattern**\n\nA common pattern is the \"or\" initialization to prevent overwriting existing state:\n\n```lua\n-- Only initializes if MyData doesn't already exist\nMyData = MyData or {\n  counter = 0,\n  users = {},\n  settings = { maxUsers = 100 }\n}\n```\n\nThis ensures that when your process code is re-evaluated (like during updates), existing state isn't lost.\n\n**State Modification Through Handlers**\n\nState changes happen through message handlers that modify global variables:\n\n```lua\nHandlers.add(\"increment\", \n  { Action = \"Increment\" },\n  function(msg)\n    MyData.counter = MyData.counter + 1\n    msg.reply({ Data = \"Counter is now: \" .. MyData.counter })\n  end\n)\n```\n\n**State Querying**\n\nYou can query state without modifying it using dry-run operations or read-only handlers:\n\n```lua\nHandlers.add(\"getBalance\",\n  { Action = \"Balance\" },\n  function(msg)\n    local balance = Balances[msg.From] or 0\n    msg.reply({ Data = tostring(balance) })\n  end\n)\n```\n\n**State Limitations and Considerations**\n\nState is held in memory, so very large datasets may hit limits.\n\nEach message handler execution is atomic - either all changes succeed or none do.\n\n**Inter-Process State Communication**\n\nTo share or synchronize state between processes, you must use message passing:\n\n```lua\n-- Process A notifies Process B of state change\nao.send({\n  Target = \"process-b-id\",\n  Action = \"StateUpdate\",\n  Data = json.encode({ newValue = MyData.counter })\n})\n```",
    "tags": ["ao", "processes"]
  },
  {
    "question": "How can I handle authentication in my AO application?",
    "answer": "Authentication in AO applications works differently than traditional web apps since AO processes are decentralized and don't have built-in user sessions. Here are the main approaches:\n\n**Wallet-Based Authentication**\n\nThe most common pattern is using Arweave wallet addresses as user identities. Every message sent to an AO process includes a From field containing the sender's wallet address:\n\n```lua\nHandlers.add(\"protected-action\",\n  { Action = \"SecretOperation\" },\n  function(msg)\n    local userAddress = msg.From\n    -- userAddress is cryptographically verified by the network\n    if authorizedUsers[userAddress] then\n      -- Perform protected operation\n    else\n      msg.reply({ Data = \"Unauthorized\" })\n    end\n  end\n)\n```\n\n**Web Interface Authentication**\n\nOn the frontend, connect to user wallets:\n\n```javascript\n// Connect wallet\nawait window.arweaveWallet.connect(['ACCESS_ADDRESS', 'SIGN_TRANSACTION']);\nconst userAddress = await window.arweaveWallet.getActiveAddress();\n\n// Send authenticated message\nconst signer = createDataItemSigner(window.arweaveWallet);\nawait message({\n  process: processId,\n  signer, // This ensures msg.From is the user's address\n  tags: [{ name: 'Action', value: 'UserAction' }]\n});\n```\n\nWallet addresses work across all AO applications, and messages are signed and verified by the AO network.",
    "tags": ["ao", "authentication", "wallet", "arweave"]
  }
]
